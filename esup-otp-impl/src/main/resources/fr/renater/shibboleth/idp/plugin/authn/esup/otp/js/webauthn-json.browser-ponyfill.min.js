function base64urlToBuffer(e){const t="==".slice(0,(4-e.length%4)%4),r=e.replace(/-/g,"+").replace(/_/g,"/")+t,n=atob(r),i=new ArrayBuffer(n.length),o=new Uint8Array(i);for(let e=0;e<n.length;e++)o[e]=n.charCodeAt(e);return i}function bufferToBase64url(e){const t=new Uint8Array(e);let r="";for(const e of t)r+=String.fromCharCode(e);const n=btoa(r),i=n.replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"");return i}function convert(e,t,r){if(t===copyValue)return r;if(t===convertValue)return e(r);if(t instanceof Array)return r.map(r=>convert(e,t[0],r));if(t instanceof Object){const n={};for(const[i,o]of Object.entries(t)){if(o.derive){const e=o.derive(r);void 0!==e&&(r[i]=e)}if(i in r)null!=r[i]?n[i]=convert(e,o.schema,r[i]):n[i]=null;else if(o.required)throw new Error(`Missing key: ${i}`)}return n}}function derived(e,t){return{required:!0,schema:e,derive:t}}function required(e){return{required:!0,schema:e}}function optional(e){return{required:!1,schema:e}}function createRequestFromJSON(e){return convert(base64urlToBuffer,credentialCreationOptions,e)}function createResponseToJSON(e){return convert(bufferToBase64url,publicKeyCredentialWithAttestation,e)}function getRequestFromJSON(e){return convert(base64urlToBuffer,credentialRequestOptions,e)}function getResponseToJSON(e){return convert(bufferToBase64url,publicKeyCredentialWithAssertion,e)}function supported(){return!!(navigator.credentials&&navigator.credentials.create&&navigator.credentials.get&&window.PublicKeyCredential)}async function create(e){const t=await navigator.credentials.create(e);return t.toJSON=(()=>createResponseToJSON(t)),t}async function get(e){const t=await navigator.credentials.get(e);return t.toJSON=(()=>getResponseToJSON(t)),t}var copyValue="copy",convertValue="convert",publicKeyCredentialDescriptorSchema={type:required(copyValue),id:required(convertValue),transports:optional(copyValue)},simplifiedExtensionsSchema={appid:optional(copyValue),appidExclude:optional(copyValue),credProps:optional(copyValue)},simplifiedClientExtensionResultsSchema={appid:optional(copyValue),appidExclude:optional(copyValue),credProps:optional(copyValue)},credentialCreationOptions={publicKey:required({rp:required(copyValue),user:required({id:required(convertValue),name:required(copyValue),displayName:required(copyValue)}),challenge:required(convertValue),pubKeyCredParams:required(copyValue),timeout:optional(copyValue),excludeCredentials:optional([publicKeyCredentialDescriptorSchema]),authenticatorSelection:optional(copyValue),attestation:optional(copyValue),extensions:optional(simplifiedExtensionsSchema)}),signal:optional(copyValue)},publicKeyCredentialWithAttestation={type:required(copyValue),id:required(copyValue),rawId:required(convertValue),authenticatorAttachment:optional(copyValue),response:required({clientDataJSON:required(convertValue),attestationObject:required(convertValue),transports:derived(copyValue,e=>{var t;return(null==(t=e.getTransports)?void 0:t.call(e))||[]})}),clientExtensionResults:derived(simplifiedClientExtensionResultsSchema,e=>e.getClientExtensionResults())},credentialRequestOptions={mediation:optional(copyValue),publicKey:required({challenge:required(convertValue),timeout:optional(copyValue),rpId:optional(copyValue),allowCredentials:optional([publicKeyCredentialDescriptorSchema]),userVerification:optional(copyValue),extensions:optional(simplifiedExtensionsSchema)}),signal:optional(copyValue)},publicKeyCredentialWithAssertion={type:required(copyValue),id:required(copyValue),rawId:required(convertValue),authenticatorAttachment:optional(copyValue),response:required({clientDataJSON:required(convertValue),authenticatorData:required(convertValue),signature:required(convertValue),userHandle:required(convertValue)}),clientExtensionResults:derived(simplifiedClientExtensionResultsSchema,e=>e.getClientExtensionResults())};export{create,get,createRequestFromJSON as parseCreationOptionsFromJSON,getRequestFromJSON as parseRequestOptionsFromJSON,supported};