###############################
#  EsupOtp configuration  #
###############################

## SERVER CONFIG ##

# Required.
idp.esup.otp.apiHost=
idp.esup.otp.apiPassword=tobedefine
idp.esup.otp.usersSecret=tobedefine

# Required. Only true/false allowed:
#privacyidea.verify_ssl=true

# Optional.
idp.esup.otp.supportedMethods=totp,webauthn,push,bypass,random_code,random_code_mail
# Define if username is with scope, by default = true
#idp.esup.otp.username.withScope=false
# We can set another scoped delimiter, by default = @
#idp.esup.otp.username.scopedDelimiter=
#idp.esup.otp.redirectURL=
#idp.esup.otp.endpoint.health=
#idp.esup.otp.send.counter=

####################################
#  Example MFA flow configuration  #
####################################


# Path for the MFA flow configuration file: $idp_install_path/conf/authn/mfa-authn-config.xml

# Example of the MFA flow mapping:

#   <util:map id="shibboleth.authn.MFA.TransitionMap">
#        <!-- First rule runs the Password login flow. -->
#        <entry key="">
#            <bean parent="shibboleth.authn.MFA.Transition" p:nextFlow="authn/Password" />
#        </entry>
#
#        <!--
#        Second rule runs a function if Password succeeds, to determine whether an additional
#        factor is required.
#        -->
#        <entry key="authn/Password">
#                <bean parent="shibboleth.authn.MFA.Transition" p:nextFlowStrategy-ref="checkSecondFactor" />
#        </entry>
#
#        <!-- An implicit final rule will return whatever the final flow returns. -->
#    </util:map>

#    <bean id="checkSecondFactor" parent="shibboleth.ContextFunctions.Scripted" factory-method="inlineScript"
#                p:customObject-ref="shibboleth.AttributeResolverService">
#        <constructor-arg>
#            <value>
#            <![CDATA[
#                nextFlow = "authn/EsupOtp";
#
#                logger = Java.type("org.slf4j.LoggerFactory").getLogger("checkSecondFactor");
#                logger.debug('Starting checkSecondFactor');
#
#                // Go straight to second factor if we have to, or set up for an attribute lookup first.
#                authCtx = input.getSubcontext("net.shibboleth.idp.authn.context.AuthenticationContext");
#                mfaCtx = authCtx.getSubcontext("net.shibboleth.idp.authn.context.MultiFactorAuthenticationContext");
#
#                resCtx = input.getSubcontext("net.shibboleth.idp.attribute.resolver.context.AttributeResolutionContext", true);
#                resCtx.resolveAttributes(custom);
#                logger.debug('ResolvedAttribute : ' + resCtx.getResolvedIdPAttributes());
#                if (mfaCtx.isAcceptable()) {
#                    nextFlow = null;
#                }
#
#                logger.debug('Next flow value = ' + nextFlow);
#                nextFlow;   // pass control to second factor or end with the first
#            ]]>
#            </value>
#        </constructor-arg>
#    </bean>

############################################
#  Example authn.properties configuration  #
############################################


# Path for the authn.properties file: $idp_install_path/conf/authn/authn.properties

# To enable the MFA login flow and add the following line:
#idp.authn.flows = MFA

#### MFA ####

#idp.authn.MFA.order = 1000
#idp.authn.MFA.passiveAuthenticationSupported = true
#idp.authn.MFA.forcedAuthenticationSupported = true
#idp.authn.MFA.validateLoginTransitions = true
# Defaults to set AuthnInstant based on oldest component result
#idp.authn.MFA.useLatestTimestamp = false
# The list below almost certainly requires changes, and should generally be the
# union of any of the separate factors you combine in your particular MFA flow
# rules. The example corresponds to the example in mfa-authn-config.xml that
# combines IPAddress with Password.
idp.authn.MFA.supportedPrincipals = \
    saml2/https://refeds.org/profile/mfa, \
    saml2/urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport, \
    saml2/urn:oasis:names:tc:SAML:2.0:ac:classes:Password, \
    saml1/urn:oasis:names:tc:SAML:1.0:am:password, \
    saml1/https://refeds.org/profile/mfa

# Generic flow properties to adjust behavior
#idp.authn.esupOtp.order = 1000
#idp.authn.esupOtp.forcedAuthenticationSupported = true
# The list below should be changed to reflect whatever locally- or
# community-defined values are appropriate to represent WebAuthn. It is
# strongly advised that the value not be specific to WebAuthn or any
# particular technology to avoid lock-in.
idp.authn.esupOtp.supportedPrincipals = \
    saml2/https://refeds.org/profile/mfa, \
    saml1/https://refeds.org/profile/mfa

# To activate the SSO for all flows, make sure to enable it by adding (e.g.):
#idp.authn.MFA.reuseCondition=shibboleth.Conditions.TRUE
#idp.authn.Password.reuseCondition=shibboleth.Conditions.TRUE
#idp.authn.esupOtp.reuseCondition=shibboleth.Conditions.TRUE
#idp.authn.esupOtp.activationCondition=shibboleth.Conditions.TRUE

##############################################
#  Example SP shibboleth2.xml configuration  #
##############################################

#<SessionInitiator type="SAML2">
#    <samlp:AuthnRequest xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol" target="https://test-sp.federation.renater.fr" entityID="https://dev-idp-dedie.renater.fr/idp/shibboleth">
#        <samlp:RequestedAuthnContext Comparison="exact" xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion">
#            <saml:AuthnContextClassRef>https://refeds.org/profile/mfa</saml:AuthnContextClassRef>
#        </samlp:RequestedAuthnContext>
#    </samlp:AuthnRequest>
#</SessionInitiator>
