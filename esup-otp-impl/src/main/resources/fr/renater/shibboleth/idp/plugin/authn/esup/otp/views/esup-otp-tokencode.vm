##
## Velocity Template for DisplayTOTPView view-state
##
## Velocity context will contain the following properties
## flowExecutionUrl - the form action location
## flowRequestContext - the Spring Web Flow RequestContext
## flowExecutionKey - the SWF execution key (this is built into the flowExecutionUrl)
## profileRequestContext - root of context tree
## authenticationContext - context with authentication request information
## authenticationErrorContext - context with login error state
## authenticationWarningContext - context with login warning state
## rpUIContext - the context with SP UI information from the metadata
## encoder - HTMLEncoder class
## cspDigester - Calculates base64-encoded SHA-2 hashes (call apply)
## cspNonce - Calculates secure nonces (call generateIdentifier)
## request - HttpServletRequest
## response - HttpServletResponse
## environment - Spring Environment object for property resolution
## custom - arbitrary object injected by deployer
##
#set ($esupOtpContext = $authenticationContext.getSubcontext('fr.renater.shibboleth.idp.plugin.authn.esup.otp.context.EsupOtpContext'))
#if ("push" == $esupOtpContext.getTransportChoose())
    #set ($apiUrl = $environment.getProperty("idp.esup.otp.apiHost"))
#end
#set ($rpContext = $profileRequestContext.getSubcontext('net.shibboleth.profile.context.RelyingPartyContext'))
##
#set ($onClick = "this.childNodes[0].nodeValue='#springMessageText('idp.login.pleasewait', 'Logging in, please wait...')'")
$response.addHeader("Content-Security-Policy", "script-src-attr 'unsafe-hashes' 'sha256-$cspDigester.apply($onClick)'")
<!DOCTYPE html>
<html>
    <head>
        <title>#springMessageText("idp.title", "Web Login Service")</title>
        #parse("head.vm")
        #if ("push" == $esupOtpContext.getTransportChoose())
            <script src="$apiUrl/js/socket.io.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.2.0/crypto-js.min.js"></script>
            <script type="text/javascript">
                function raw_hash(algo, data) {
                    if (algo === 'MD5') {
                        return CryptoJS.MD5(data).toString(CryptoJS.enc.Hex);
                    } else if (algo === 'SHA256') {
                        return CryptoJS.SHA256(data).toString(CryptoJS.enc.Hex);
                    } else {
                        throw new Error('Algorithme non supporté');
                    }
                }

                /** @param {string} data */
                function md5(data) {
                    return raw_hash('MD5', data)
                }

                /** @param {String} uid */
                function get_hash() {
                    const d = new Date();
                    const present_salt = d.getUTCDate()+d.getUTCHours().toString();
                    //console.log("present-salt for ${esupOtpContext.getUsername()}:", present_salt);
                    return raw_hash('SHA256', raw_hash('MD5', "${environment.getProperty('idp.esup.otp.usersSecret')}") + "${esupOtpContext.getUsername()}" + present_salt);
                }

                // Fonction d'initialisation du socket
                function initializeSocket() {
                    var socket = io.connect("$apiUrl", {
                        reconnect: true,
                        path: "/sockets",
                        query: "uid=${esupOtpContext.getUsername()}&hash=" + get_hash() + "&app=cas"
                    });
                    socket.on('connect', function () {
                        console.log("Socket connect");
                    });
                    socket.on('userAuth', function (data) {
                        if (data.code == "Ok") {
                          submitCode(data.otp);
                        }
                    });
                }

                function submitCode(code) {
                    document.getElementById("tokencode").value = code;
                    document.getElementById("submitPush").click();
                }

                initializeSocket();
            </script>
        #else
            <script>
                // Fonction de vérification de la longueur du token
                function checkInputLength() {
                    const tokenInputElement = document.getElementById("tokencode");

                    const inputLength = tokenInputElement.textLength + 1;

                    // Check inputLength = 6
                    disableSubmitButton(inputLength != 6);
                }

                function disableSubmitButton(disable) {
                    const submitButton = document.getElementById("submitButton");
                    submitButton.disabled = disable
                }

                // Ajoute l'écouteur d'événement une fois le contenu chargé
                document.addEventListener("DOMContentLoaded", function() {
                    const tokenInputElement = document.getElementById("tokencode");
                    tokenInputElement.addEventListener('keydown', (e) => {
                        // prevent if input is not number
                        if (e.key.length == 1 && /[a-zA-Z]/.test(e.key)) {
                            e.preventDefault();
                        }
                        if(e.key == "Backspace" || e.key == "Delete") {
                            disableSubmitButton(true);
                        }
                    });
                    tokenInputElement.addEventListener('keypress', (e) => {
                        checkInputLength();
                    });
                });
            </script>
            <style>
                @media all {
                    .input-wrap {
                        position: relative;
                        display: flex;
                        padding: 0px;
                    }

                    .input-wrap.token {
                        width: 300px;
                        margin-bottom: 10px;
                        column-gap: 10px;
                    }

                    .token-input {
                        position: absolute;
                        left: 0px;
                        top: 0px;
                        z-index: 2;
                        width: 400px;
                        height: 50px;
                        margin-bottom: 0px;
                        padding: 0px 0px 0px 12px;
                        border-style: none;
                        border-width: 1px;
                        border-color: black;
                        background-color: transparent;
                        font-family: Verdana, Geneva, sans-serif;
                        color: rgb(0, 0, 0);
                        font-size: 23px;
                        font-weight: 400;
                        text-align: left;
                        letter-spacing: 35.5px;
                        text-transform: uppercase;
                    }

                    .token-input:hover ~ .one-input {
                        border-color: #0491c6;
                        box-shadow: none;
                    }

                    .one-input {
                        position: relative;
                        min-height: 40px;
                        margin-bottom: 20px;
                        padding: 8px 12px;
                        border-style: solid;
                        border-width: 1px;
                        border-color: rgba(18, 19, 49, 0.25);
                        border-radius: 5px;
                        background-color: white;
                        box-shadow: rgba(0, 0, 0, 0.1) 0px 5px 10px -5px;
                        transition-property: box-shadow, border-color;
                        transition-duration: 200ms, 200ms;
                        transition-timing-function: ease, ease;
                        color: rgb(18, 19, 49);
                    }

                    .token-fake {
                        width: 40px;
                        height: 50px;
                        background-color: transparent;
                    }

                }

                .input {
                    display: block;
                    line-height: 1.42857143;
                    box-shadow: none;
                }

                .input:focus {
                    outline: 0;
                    background-color: transparent;
                    border: none;
                    box-shadow: none;
                }

                .input:focus ~ .one-input {
                    border-color: #0491c6;
                    box-shadow: none;
                }

                .token-overflow {
                    z-index: 5;
                    width: 30px;
                    height: 50px;
                    background-color: #fff;
                    position: absolute;
                    top: 0%;
                    left: 100%;
                    right: auto;
                }

            </style>
        #end
    </head>
    <body>
        <main class="main">
            <section class="small-12 small-centered medium-8 large-7">
                #parse("header.vm")

                #parse("esup-otp-error.vm")

                #if ("push".equals($esupOtpContext.getTransportChoose()))
                    <form id="pushForm" action="$flowExecutionUrl" method="post">
                        <input type="hidden" id="tokencode" name="tokencode" type="text" value="" />
                        <button id="submitPush" style="display: none;" type="submit" name="_eventId_proceed"
                            onClick="$onClick"
                            >#springMessageText("idp.login.login", "Login")</button>
                    </form>

                    <article class="small-10 medium-10 large-7 small-centered text-center">
                        <p class="callout primary">
                            #springMessageText("idp.esup.otp.wait", "Wait phone validation.")
                        </p>
                    </article>
                #else
                    <form action="$flowExecutionUrl" method="post">
                        #parse("csrf/csrf.vm")

                        #parse("info.vm")

                        <fieldset class="small-10 medium-10 large-7 small-centered margin-top">

                            <label for="tokencode"><i class="fa fa-lg fa-lock"></i> #springMessageText("idp.totp.field", "Token Code")</label>
                            <div class="input-wrap token">
                                <input class="form-element form-field token-input input" id="tokencode" name="tokencode" type="text" inputmode="numeric" value="" minlength="6" maxlength="6" placeholder="000000" autocomplete="off" required />
                                <div class="one-input token-fake"></div>
                                <div class="one-input token-fake"></div>
                                <div class="one-input token-fake"></div>
                                <div class="one-input token-fake"></div>
                                <div class="one-input token-fake"></div>
                                <div class="one-input token-fake"></div>
                                <div class="token-overflow"></div>
                            </div>


                            <button class="button float-right" type="submit" name="_eventId_proceed" id="submitButton"
                                disabled
                                onClick="$onClick"
                                >#springMessageText("idp.login.login", "Login")</button>
                        </fieldset>

                        <fieldset class="small-10 medium-10 large-7 small-centered margin-top">

                            <label for="tokencode"><i class="fa fa-lg fa-lock"></i> #springMessageText("idp.totp.field", "Token Code")</label>
                            <input class="form-element form-field" id="tokencode" name="tokencode" type="text" value="" />

                            <button class="button float-right" type="submit" name="_eventId_proceed"
                                onClick="$onClick"
                                >#springMessageText("idp.login.login", "Login")</button>
                        </fieldset>
                    </form>
                #end

                <article class="small-10 medium-10 large-7 small-centered text-center">
                    <p class="callout primary">
                        #springMessageText("idp.esup.otp.updatechoices", "Update choices.")
                        <br/><br/>
                        #springMessageText("idp.esup.otp.manager", "Go to application") : <a href="#springMessageText("idp.esup.otp.manager.link", "https://otpmanager-test.fr/preferences")" target="_blank">#springMessageText("idp.esup.otp.manager.here", "here")</a>
                    </p>
                </article>

                #parse("help.vm")

            </section>
        </main>
        #parse("footer.vm")
     </body>
</html>